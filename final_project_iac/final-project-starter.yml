Description: >
    Tony Hendrick / Udacity 2020
    IaC Final Project CloudFormation Template
Parameters:
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
    EnvironmentName:
        Description: Single Parameter that we are passing with the env name.
        Type: String

    EC2InstanceType:
        Description: EC2 Instance Type for Launch Configuration
        Type: String
        Default: t2.micro

    EC2KeyName:
      Description: The key name to connect to the EC2 instances
      Type: String

    EC2ami:
      Description: The ami id for the instances
      Type: String
      Default: ami-003634241a8fcdec0

    ASGMin:
      Description: The auto scaling minimum size
      Type: String
      Default: "1"

    ASGMax:
      Description: The auto scaling maximum size
      Type: String
      Default: "1"


Resources:
  #IAM Role for EC2 to S3 read only
  RoleS3ReadOnly:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: RoleS3ReadOnly
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} IAM Role S3 Access

  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  AppIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref RoleS3ReadOnly

  #security group for auto scaling group
  SecurityGroupHTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow engress HTTP
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Egress allow HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Egress allow HTTPS
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          Description: Ingress allow HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Ingress allow HTTPS
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Security Group HTTP
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"


  #load balancer
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Sub ${EnvironmentName}-LB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroupHTTP
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LB
      Type: application


  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: TargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: "HTTP"

  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-launch-template
      LaunchTemplateData:
        InstanceType: !Ref EC2InstanceType
        ImageId: !Ref EC2ami
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 10
            DeviceName: /dev/sdf
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - AppIamInstanceProfile
            - Arn
        SecurityGroupIds:
        - !Ref SecurityGroupHTTP
        UserData:
          Fn::Base64: |
                #!/bin/bash
                apt-get update -y
                apt-get install unzip awscli -y
                apt-get install apache2 -y
                systemctl start apache2.service
                cd /var/www/html
                aws s3 cp s3://udacity-demo-1/udacity.zip .
                unzip -o udacity.zip

  ASG: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate: 
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      MinSize: !Ref ASGMin
      MaxSize: !Ref ASGMax
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: !Sub ${EnvironmentName} Auto Scaling Group


Outputs:
  RoleS3ReadOnly:
    Description: Role to allow read permissions to S3
    Value: !Ref RoleS3ReadOnly
    Export:
      Name: !Sub ${EnvironmentName}-ROLES3RO

  SecurityGroupHTTP:
    Description: Security group to allow http and https
    Value: !Ref SecurityGroupHTTP
    Export:
      Name: !Sub ${EnvironmentName}-SGHTTP

  AppLoadBalancer:
    Description: The load balancer DNS
    Value: !Join ["", ['http://', !GetAtt AppLoadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LBDNS